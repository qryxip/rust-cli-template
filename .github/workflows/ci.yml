name: CI

#on:
#  schedule:
#    - cron: '0 0 * * 0'
#  push:
#    branches:
#      - master
#    tags:
#      - 'v[0-9]+.[0-9]+.[0-9]+**'
#  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup `stable-x86_64-unknown-linux-gnu`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true
          profile: default

      - name: '`cargo fmt -- --check`'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  build:
    strategy:
      fail-fast: false
      matrix:
        channel:
          - stable
          - beta
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - { channel: stable, target-triple: x86_64-pc-windows-msvc   , host-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { channel: stable, target-triple: x86_64-apple-darwin      , host-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { channel: stable, target-triple: x86_64-unknown-linux-gnu , host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }
          - { channel: stable, target-triple: x86_64-unknown-linux-musl, host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }
          - { channel: beta  , target-triple: x86_64-pc-windows-msvc   , host-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { channel: beta  , target-triple: x86_64-apple-darwin      , host-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { channel: beta  , target-triple: x86_64-unknown-linux-gnu , host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }
          - { channel: beta  , target-triple: x86_64-unknown-linux-musl, host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }

    name: ${{ matrix.channel }}-${{ matrix.target-triple }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: '`sudo apt-get install musl-tools`'
        run: sudo apt-get install musl-tools
        if: matrix.target-triple == 'x86_64-unknown-linux-musl'

      - name: 'Setup `${{ matrix.channel }}-${{ matrix.host-triple }}` (target: `${{ matrix.target-triple }}`)'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.host-triple }}
          target: ${{ matrix.target-triple }}
          default: true
          profile: default

      - name: '`cargo clippy --target ${{ matrix.target-triple }} -v -- -D warnings`'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --target ${{ matrix.target-triple }} -v -- -D warnings

      - name: '`cargo test --no-fail-fast --target ${{ matrix.target-triple }} -v`'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --target ${{ matrix.target-triple }} -v

      - name: '`cargo build --target ${{ matrix.target-triple }} -v`'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target-triple }} -v

  release:
    strategy:
      fail-fast: true
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        include:
          - { target-triple: x86_64-pc-windows-msvc   , host-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { target-triple: x86_64-apple-darwin      , host-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { target-triple: x86_64-unknown-linux-gnu , host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }
          - { target-triple: x86_64-unknown-linux-musl, host-triple: x86_64-unknown-linux-gnu, os: ubuntu-18.04 }

    name: GitHub Release (${{ matrix.target-triple }})
    runs-on: ${{ matrix.os }}
    needs: [rustfmt, build]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: '`sudo apt-get install musl-tools`'
        run: sudo apt-get install musl-tools
        if: matrix.target-triple == 'x86_64-unknown-linux-musl'

      - name: 'Setup `stable-${{ matrix.host-triple }}` (target: `${{ matrix.target-triple }}`)'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host-triple }}
          target: ${{ matrix.target-triple }}
          default: true
          profile: default

      - name: '`cargo build --release --target ${{ matrix.target-triple }} -v`'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target-triple }} -v

      - name: Create an asset
        id: asset
        run: |
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            DOT_EXE=.exe
          fi
          REPOSITORY=${{ github.repository }}
          BIN_TARGET="${REPOSITORY#*/}"
          EXECUTABLE="./target/${{ matrix.target-triple }}/release/$BIN_TARGET$DOT_EXE"
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target-triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$EXECUTABLE" "./$ASSET_STEM/"
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            ASSET="./$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "$ASSET"
          else
            ASSET="./$ASSET_STEM.tar.gz"
            tar -czvf "$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.asset.outputs.asset }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish
    runs-on: ubuntu-18.04
    needs: [rustfmt, build, release]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup `stable-x86_64-unknown-linux-gnu`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true
          profile: minimal

      - name: '`cargo publish --token "$CRATES_IO_TOKEN" -v`'
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CRATES_IO_TOKEN }} -v
